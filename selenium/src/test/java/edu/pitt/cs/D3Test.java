package edu.pitt.cs;

// Generated by Selenium IDE
import static org.hamcrest.MatcherAssert.assertThat;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import java.time.Duration;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class D3Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    ChromeOptions options = new ChromeOptions();
    options.addArguments("--headless");
    driver = new ChromeDriver(options);
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void tEST1LINKS() {
    // Open the URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Store attribute from reset
    {
      WebElement element = driver.findElement(By.xpath("/html/body/div/header/nav/ul/li[8]/a"));
      String attribute = element.getAttribute("href");
      vars.put("resetSrc", attribute);
    }
    // Verify value of reset
    assertEquals(vars.get("resetSrc").toString(), "http://localhost:8080/reset");
  }
  @Test
  public void tEST2RESET() {
    // Open the URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Rent all cats
    js.executeScript("document.cookie = \"1=true\";document.cookie = \"2=true\";document.cookie = \"3=true\";");
    // Click "Reset"
    driver.findElement(By.linkText("Reset")).click();
    // Verify cat 1
    assertThat(driver.findElement(By.id("cat-id1")).getText(), is("ID 1. Jennyanydots"));
    // Verify cat 2
    assertThat(driver.findElement(By.id("cat-id2")).getText(), is("ID 2. Old Deuteronomy"));
    // Verify cat 3
    assertThat(driver.findElement(By.id("cat-id3")).getText(), is("ID 3. Mistoffelees"));
  }
  @Test
  public void tEST3CATALOG() {
    // Open the URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Catalog"
    driver.findElement(By.linkText("Catalog")).click();
    // Store image attribute
    {
      WebElement element = driver.findElement(By.xpath("/html/body/div/main/div[1]/ol/li[2]/img"));
      String attribute = element.getAttribute("src");
      vars.put("imageSrc", attribute);
    }
    // Check image value
    assertEquals(vars.get("imageSrc").toString(), "http://localhost:8080/images/cat2.jpg");
  }
  @Test
  public void tEST4LISTING() {
    // Open the URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Catalog"
    driver.findElement(By.linkText("Catalog")).click();
    // Check that there's three cats
    {
      List<WebElement> elements = driver.findElements(By.id("cat-id3"));
      assert(elements.size() > 0);
    }
    // Check that there's no more than 3 cats
    {
      List<WebElement> elements = driver.findElements(By.xpath("//div/ul/li[4]"));
      assert(elements.size() == 0);
    }
    // Check text of cat 3
    assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
  }
  @Test
  public void tEST5RENTACAT() {
    // Open URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Rent-A-Cat"
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // Check that "Rent" button exists
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".form-group:nth-child(3) .btn"));
      assert(elements.size() > 0);
    }
    // Check that "Return" button exists
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".form-group:nth-child(4) .btn"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST6RENT() {
    // Open URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Rent-A-Cat"
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // Type "1"
    driver.findElement(By.id("rentID")).sendKeys("1");
    // Click "Rent"
    driver.findElement(By.cssSelector(".form-group:nth-child(3) .btn")).click();
    // Check that text 1 is "Rented out"
    assertThat(driver.findElement(By.xpath("//div/ul/li[1]")).getText(), is("Rented out"));
    // Check that text 2 is "ID 2. Old Deuteronomy"
    assertThat(driver.findElement(By.xpath("//div/ul/li[2]")).getText(), is("ID 2. Old Deuteronomy"));
    // Check that text 3 is "ID 3. Mistoffelees"
    assertThat(driver.findElement(By.xpath("//div/ul/li[3]")).getText(), is("ID 3. Mistoffelees"));
    // Check that rentResult element is present
    {
      List<WebElement> elements = driver.findElements(By.id("rentResult"));
      assert(elements.size() > 0);
    }
    // Check that the text is "Success!"
    assertThat(driver.findElement(By.id("rentResult")).getText(), is("Success!"));
  }
  @Test
  public void tEST7RETURN() {
    // Open URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Rent cat 2
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=true\";document.cookie = \"3=false\";");
    // Click "Rent-A-Cat"
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // Type "2"
    driver.findElement(By.id("returnID")).sendKeys("2");
    // Click "Return"
    driver.findElement(By.cssSelector(".form-group:nth-child(4) .btn")).click();
    // Check that cat 1 is "ID 1. Jennyanydots"
    assertThat(driver.findElement(By.id("cat-id1")).getText(), is("ID 1. Jennyanydots"));
    // Check that cat 2 is "ID 2. Old Deuteronomy"
    assertThat(driver.findElement(By.id("cat-id2")).getText(), is("ID 2. Old Deuteronomy"));
    // Check that cat 3 is "ID 3. Mistoffelees"
    assertThat(driver.findElement(By.id("cat-id3")).getText(), is("ID 3. Mistoffelees"));
    // Check that returnResult element is present
    {
      List<WebElement> elements = driver.findElements(By.id("returnResult"));
      assert(elements.size() > 0);
    }
    // Check that the text is "Success!"
    assertThat(driver.findElement(By.id("returnResult")).getText(), is("Success!"));
  }
  @Test
  public void tEST8FEEDACAT() {
    // Open URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Feed-A-Cat"
    driver.findElement(By.linkText("Feed-A-Cat")).click();
    // Check that "Feed" button exists
    {
      List<WebElement> elements = driver.findElements(By.cssSelector(".btn"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST9FEED() {
    // Open URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Feed-A-Cat"
    driver.findElement(By.linkText("Feed-A-Cat")).click();
    // Type "6"
    driver.findElement(By.id("catnips")).sendKeys("6");
    // Click "Feed"
    driver.findElement(By.cssSelector(".btn")).click();
    // Wait for element
    {
      WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id=\'feedResult\' and text()=\'Nom, nom, nom.\']")));
    }
    // Check that text is "nom nom nom."
    assertThat(driver.findElement(By.id("feedResult")).getText(), is("Nom, nom, nom."));
  }
  @Test
  public void tEST10GREETACAT() {
    // Open URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Click "Greet-A-Cat"
    driver.findElement(By.linkText("Greet-A-Cat")).click();
    // Check that element is present
    {
      List<WebElement> elements = driver.findElements(By.cssSelector("#greeting > h4"));
      assert(elements.size() > 0);
    }
    // Check that text is "Meow!Meow!Meow!"
    assertThat(driver.findElement(By.cssSelector("#greeting > h4")).getText(), is("Meow!Meow!Meow!"));
  }
  @Test
  public void tEST11GREETACATWITHNAME() {
    // Open base URL
    driver.get("http://localhost:8080");
    // Reset cookies
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // Open Greet Jennyanydots URL
    driver.get("http://localhost:8080/greet-a-cat/Jennyanydots");
    // Check that text exists
    {
      List<WebElement> elements = driver.findElements(By.cssSelector("#greeting > h4"));
      assert(elements.size() > 0);
    }
    // Check that text is "Meow! from Jennyanydots."
    assertThat(driver.findElement(By.cssSelector("#greeting > h4")).getText(), is("Meow! from Jennyanydots."));
  }
}
